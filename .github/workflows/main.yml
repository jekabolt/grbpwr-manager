name: Build and run docker image on remote

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+(-staging)?'

jobs:
  push:
    name: Push Docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            jekabolt/grbpwr-manager

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.docker
          cache-to: type=local,dest=/tmp/.docker

deploy:
    if: endsWith(github.ref, '-staging')
    runs-on: ubuntu-latest
    needs: push
    steps:
      - uses: actions/checkout@v4

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Executing remote SSH commands using SSH key
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.ID_RSA }}
          script: |
            docker pull jekabolt/grbpwr-manager:${{ env.RELEASE_VERSION }} || exit 1
            docker stop grbpwr-manager || true
            docker rm grbpwr-manager || true
            docker run --name=grbpwr-manager -d \
              --restart=unless-stopped  \
              --publish 8001:8001 \
              --env-file /root/env/.env \
              --mount src=/root/bunt,target=/root/bunt,type=bind \
              jekabolt/grbpwr-manager:${{ env.RELEASE_VERSION }}
