name: Build and run docker image on remote

on:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "releases/**"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            sleep 1
          done

      - name: Install dependencies
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.21.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.4.0
          go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger@latest
          go install golang.org/x/text/cmd/gotext@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          go install github.com/vektra/mockery/v2@v2.43.2
          go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
          go install github.com/bufbuild/buf/cmd/buf@latest

      - name: Generate Proto
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          buf generate

      - name: Run tests
        run: go test -v ./...
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: test_db

  push:
    name: Push Docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare Docker Tag
        id: prepare_tag
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "CUSTOM_TAG=${SHORT_SHA}" >> $GITHUB_ENV
          elif [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "CUSTOM_TAG=${TAG_NAME}" >> $GITHUB_ENV
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            jekabolt/grbpwr-manager
          tags: |
            type=raw,value=${{ env.CUSTOM_TAG }}
            type=raw,value=latest

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.docker
          cache-to: type=local,dest=/tmp/.docker

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Executing remote SSH commands using SSH key
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.ID_RSA }}
          script: |
            docker pull jekabolt/grbpwr-manager:${{ env.RELEASE_VERSION }} || exit 1
            docker stop grbpwr-manager || true
            docker rm grbpwr-manager || true
            docker run --name=grbpwr-manager -d \
              --restart=unless-stopped \
              --publish 8081:8081 \
              --label 'traefik.enable=true' \
              --label 'traefik.http.routers.grbpwr-manager.rule=Host(`backend.grbpwr.com`)' \
              --label 'traefik.http.routers.grbpwr-manager.entrypoints=websecure' \
              --label 'traefik.http.routers.grbpwr-manager.tls.certresolver=myresolver' \
              --label 'traefik.http.services.grbpwr-manager.loadbalancer.server.port=8081' \
              --label 'traefik.http.middlewares.rate-limit.rateLimit.average=100' \
              --label 'traefik.http.middlewares.rate-limit.rateLimit.burst=50' \
              --label 'traefik.http.routers.grbpwr-manager.middlewares=rate-limit@docker' \
              --label 'traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN' \
              --label 'traefik.http.middlewares.security-headers.headers.customrequestheaders.X-XSS-Protection=1; mode=block' \
              --label 'traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Content-Type-Options=nosniff' \
              --label 'traefik.http.middlewares.security-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=63072000; includeSubDomains; preload' \
              --label 'traefik.http.middlewares.security-headers.headers.customresponseheaders.Referrer-Policy=no-referrer-when-downgrade' \
              --label 'traefik.http.routers.grbpwr-manager.middlewares=rate-limit@docker,security-headers@docker' \
              --mount src=/usr/local/config,target=/config,type=bind \
              --network=web \
              jekabolt/grbpwr-manager:${{ env.RELEASE_VERSION }}
