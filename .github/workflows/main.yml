name: Build and run docker image on remote
on:
  push:
    branches:
      - master


  # create:
  #   tags:
  #     - v*

  # create:
  #   tags:
  #     - v*

jobs:
  push:
    name: Push Docker image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            jekabolt/grbpwr-manager

      - name: Build and push Docker images
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.ID_RSA }}
          script: whoami
      # - name: ID_RSA setup 
      #   run: echo ${{ secrets.ID_RSA }} >> ~/.ssh/id_rsa && chmod og ~/.ssh/id_rsa
      # - name: Update 
      #   run: apk update && apk add openssh-client
      # - name: Run
      #   run: |
      #     echo "${{ secrets.ID_RSA }}" | ssh -q -i /dev/stdin -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
      #       docker pull jekabolt/grbpwr-manager:master 
      # - name: Run container
      #   run: sudo sshpass -v -p '${{ secrets.SSH_PASS }}' -v  ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'cd grbpwr-manager && docker stop grbpwr-manager && docker rm grbpwr-manager && docker run --name=grbpwr-manager  -d --restart=unless-stopped --publish 8081:8081 --env-file .env --mount src=/root/bunt,target=/root/bunt,type=bind jekabolt/grbpwr-manager:master'
